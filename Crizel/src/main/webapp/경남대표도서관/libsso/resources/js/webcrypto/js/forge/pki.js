/**
 * Javascript implementation of a basic Public Key Infrastructure, including
 * support for RSA public and private keys.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
!function(){function e(e){var r=e.asn1,n=e.pki=e.pki||{};n.pemToDer=function(r){var n=e.pem.decode(r)[0];if(n.procType&&"ENCRYPTED"===n.procType.type)throw new Error("Could not convert PEM to DER; PEM is encrypted.");return e.util.createBuffer(n.body)},n.privateKeyFromPem=function(t){var o=e.pem.decode(t)[0];if("PRIVATE KEY"!==o.type&&"RSA PRIVATE KEY"!==o.type){var i=new Error('Could not convert private key from PEM; PEM header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');throw i.headerType=o.type,i}if(o.procType&&"ENCRYPTED"===o.procType.type)throw new Error("Could not convert private key from PEM; PEM is encrypted.");var p=r.fromDer(o.body);return n.privateKeyFromAsn1(p)},n.privateKeyToPem=function(t,o){var i={type:"RSA PRIVATE KEY",body:r.toDer(n.privateKeyToAsn1(t)).getBytes()};return e.pem.encode(i,{maxline:o})},n.privateKeyInfoToPem=function(n,t){var o={type:"PRIVATE KEY",body:r.toDer(n).getBytes()};return e.pem.encode(o,{maxline:t})}}var r="pki";if("function"!=typeof define){if("object"!=typeof module||!module.exports)return"undefined"==typeof forge&&(forge={}),e(forge);var n=!0;define=function(e,r){r(require,module)}}var t,o=function(n,o){o.exports=function(o){var i=t.map(function(e){return n(e)}).concat(e);if(o=o||{},o.defined=o.defined||{},o.defined[r])return o[r];o.defined[r]=!0;for(var p=0;p<i.length;++p)i[p](o);return o[r]}},i=define;define=function(e,r){return t="string"==typeof e?r.slice(2):e.slice(2),n?(delete define,i.apply(null,Array.prototype.slice.call(arguments,0))):(define=i,define.apply(null,Array.prototype.slice.call(arguments,0)))},define(["require","module","./asn1","./oids","./pbe","./pem","./pbkdf2","./pkcs12","./pss","./rsa","./util","./x509"],function(){o.apply(null,Array.prototype.slice.call(arguments,0))})}();