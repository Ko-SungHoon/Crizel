<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pentasecurity.isignplus.session.internal.SessionMapper">

	<select id="findSession" parameterType="com.pentasecurity.isignplus.session.model.SessionVO" resultType="com.pentasecurity.isignplus.session.model.SessionVO">
		SELECT
			session_id as sessionId,
			user_id as userId,
			agent_service_id as agentServiceId,
			token_key as tokenKey,
			token_seq as tokenSeq,
			token,
			device_info as deviceInfo,
			ip,
			authorized_auth_types as authorizedAuthTypes,
			valid_session as validSession,
			create_dttm as createDttm,
			update_dttm as updateDttm
		FROM
			isign_session
		WHERE
			session_id = #{sessionId}
		AND
			user_id = #{userId}
	</select>
	
	<select id="findSessionKeyBySessionId" parameterType="String"
        resultType="String">
		SELECT token_key FROM isign_session
		WHERE
			session_id = #{sessionId}
	</select>
    
    <select id="findSessionListByUserId" parameterType="String" 
        resultType="com.pentasecurity.isignplus.session.model.SessionVO">
        SELECT
            session_id as sessionId,
            user_id as userId,
            agent_service_id as agentServiceId,
            token_key as tokenKey,
			token_seq as tokenSeq,
			token,
            device_info as deviceInfo,
            ip,
			authorized_auth_types as authorizedAuthTypes,
			valid_session as validSession,
            create_dttm as createDttm,
            update_dttm as updateDttm
        FROM
            isign_session
        WHERE            
            user_id = #{userId}
        order by
        	create_dttm
    </select>
    
    <select id="findValidSessionListByUserId" parameterType="String" 
        resultType="com.pentasecurity.isignplus.session.model.SessionVO">
        SELECT
            session_id as sessionId,
            user_id as userId,
            agent_service_id as agentServiceId,
            token_key as tokenKey,
			token_seq as tokenSeq,
			token,
            device_info as deviceInfo,
            ip,
			authorized_auth_types as authorizedAuthTypes,
			valid_session as validSession,
            create_dttm as createDttm,
            update_dttm as updateDttm
        FROM
            isign_session
        WHERE            
       		valid_session = 1
        AND
            user_id = #{userId}
        order by
        	create_dttm
    </select>
	
	<select id="findTimeoutSessionList" parameterType="int" resultType="com.pentasecurity.isignplus.session.model.SessionVO">
		<![CDATA[
		SELECT
			session_id as sessionId,
			user_id as userId,
			agent_service_id as agentServiceId,
			token_key as tokenKey,
			token_seq as tokenSeq,
			token,
			device_info as deviceInfo,
			ip,
			authorized_auth_types as authorizedAuthTypes,
			valid_session as validSession,
			create_dttm as createDttm,
			update_dttm as updateDttm
		FROM
			isign_session
		WHERE
			update_dttm < DATE_ADD(CURRENT_TIMESTAMP, interval (#{sessionTimeout} * -1)  minute)
		]]>
	</select>
	
	<insert id="insertSession" parameterType="com.pentasecurity.isignplus.session.model.SessionVO">
		INSERT INTO isign_session (
			session_id,
			user_id,
			agent_service_id,
			token_key,
			token_seq,
			token,
			device_info,
			ip,
			authorized_auth_types,
			valid_session,
			create_dttm,
			update_dttm
		) VALUES (
			#{sessionId},
			#{userId},
			#{agentServiceId},
			#{tokenKey},
			#{tokenSeq},
			#{token},
			#{deviceInfo},
			#{ip},
			#{authorizedAuthTypes},
			#{validSession},
			now(),
			now()
		)
	</insert>
	
	<update id="saveSession" parameterType="com.pentasecurity.isignplus.session.model.SessionVO">
		INSERT INTO isign_session (
			session_id,
			user_id,
			agent_service_id,
			token_key,
			token_seq,
			token,
			device_info,
			ip,
			authorized_auth_types,
			valid_session,
			create_dttm,
			update_dttm
		) VALUES (
			#{sessionId},
			#{userId},
			#{agentServiceId},
			#{tokenKey},
			#{tokenSeq},
			#{token},
			#{deviceInfo},
			#{ip},
			#{authorizedAuthTypes},
			#{validSession},
			now(),
			now()
		)
		ON DUPLICATE KEY
		UPDATE
            user_id = #{userId},
			agent_service_id = #{agentServiceId},
			token_key = #{tokenKey},
			token_seq = #{tokenSeq},
			token = #{token},
			device_info = #{deviceInfo},
			ip = #{ip},
			authorized_auth_types = #{authorizedAuthTypes},
			valid_session = #{validSession},
			update_dttm = now()
	</update>

	<delete id="deleteSession" parameterType="com.pentasecurity.isignplus.session.model.SessionVO">
		DELETE FROM isign_session
		WHERE
			session_id = #{sessionId}
		AND
			user_id = #{userId}
	</delete>
	
	<delete id="deleteSessionBySessionId" parameterType="String">
		DELETE FROM isign_session
		WHERE
			session_id = #{sessionId}
	</delete>
    
    <delete id="deleteSessionByUserId" parameterType="String">
        DELETE FROM isign_session
        WHERE
            user_id = #{userId}
    </delete>

    <select id="findSessionBySessionId" parameterType="String" resultType="com.pentasecurity.isignplus.session.model.SessionVO">
        SELECT
            session_id as sessionId,
            user_id as userId,
            agent_service_id as agentServiceId,
            token_key as tokenKey,
			token_seq as tokenSeq,
			token,
            device_info as deviceInfo,
            ip,
			authorized_auth_types as authorizedAuthTypes,
			valid_session as validSession,
            create_dttm as createDttm,
            update_dttm as updateDttm
        FROM
            isign_session
        WHERE
            session_id = #{sessionId}
    </select>

	<select id="findUserIdBySessionId" parameterType="String"
			resultType="String">
		SELECT
		user_id as userId
		FROM
		isign_session
		WHERE
		session_id = #{sessionId}
	</select>
</mapper>