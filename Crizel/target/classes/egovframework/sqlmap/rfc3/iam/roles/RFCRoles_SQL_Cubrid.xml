<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="RFCRoles">
	 <typeAlias  alias="egovMap"      type = "egovframework.rte.psl.dataaccess.util.EgovMap"/>
     <typeAlias  alias="rolesVO" 			type = "egovframework.rfc3.iam.vo.RolesVO"/>
     <typeAlias  alias="rolesHierarchyVO" 	type = "egovframework.rfc3.iam.vo.RolesHierarchyVO"/>
     <typeAlias  alias="iamTree" 			type = "egovframework.rfc3.iam.vo.IamTree"/>
      
  
     <resultMap id="rolesHierarchy" class="egovframework.rfc3.iam.vo.RolesHierarchyVO">
        <result property="parentRole" column="parentRole" />
        <result property="childRole" column="childRole" />
        <result property="createDate" column="createDate" />
        <result property="modifyDate" column="modifyDate" />
    </resultMap>
    
     <cacheModel type="${Globals.ibatis.default.cache}" id="RFCRolesCache" readOnly="true" serialize="false">
     	<flushInterval hours="24" />
     	<flushOnExecute statement="rolesDAO.insertRole"/>
     	<flushOnExecute statement="rolesDAO.updateRole"/>
     	<flushOnExecute statement="rolesDAO.deleteRole"/>
     	<flushOnExecute statement="rolesDAO.insertRolesHierarchies"/>
     	<flushOnExecute statement="rolesDAO.deleteRolesHierarchies"/>
     </cacheModel>
    
    <!--  not use -->
	<select id="rolesDAO.getRoleTreeData"   parameterClass="java.lang.String"   resultClass="iamTree">
					 SELECT	
			         		A.ID  id,
							A.TITLE title,
							CASE WHEN  
									B.PARENT_ROLE is null THEN 'closed' ELSE B.PARENT_ROLE END   state
							FROM (
								SELECT	
										A.PARENT_ROLE	ID,
										B.ROLE_NM		TITLE
								FROM	
										RFC_COMTNROLES_HIERARCHY	A
								JOIN	RFC_COMTNROLES				B
								ON	A.PARENT_ROLE	= B.ROLE_ID
								WHERE	
									A.CHILD_ROLE	= #parentNode#
							)	A
						LEFT JOIN
							(
								SELECT	
										DISTINCT	A.PARENT_ROLE
										FROM	RFC_COMTNROLES_HIERARCHY	A
									LEFT JOIN	RFC_COMTNROLES_HIERARCHY	B
											ON	A.PARENT_ROLE	= B.CHILD_ROLE
								WHERE	B.CHILD_ROLE IS NULL
							)	B
								ON	A.ID	= B.PARENT_ROLE
					ORDER	BY	A.ID
	</select>
	<select id="rolesDAO.getRootNodeOfRoles" parameterClass="java.lang.String"   resultClass="iamTree" cacheModel="RFCRolesCache">
			        SELECT
							DISTINCT B.ROLE_ID	id,
							B.ROLE_NM	title,
							'closed'	state
					FROM	
							RFC_COMTNROLES_HIERARCHY	A
					JOIN	
							RFC_COMTNROLES				B
					ON	
							A.CHILD_ROLE	= B.ROLE_ID
			WHERE	
							A.CHILD_ROLE NOT IN 
							(	SELECT	DISTINCT PARENT_ROLE FROM	RFC_COMTNROLES_HIERARCHY )
	</select>
	<select id="rolesDAO.getRoleList"   resultClass="egovMap" cacheModel="RFCRolesCache" >
			    select 
					ROLE_ID  roleId,
					ROLE_NM  roleNm,
					ROLE_DC roleDc,
					[DEPTH] [depth]
				from 
					RFC_COMTNROLES
				order by [DEPTH] asc
	</select>
	
	<select id="rolesDAO.getRoleInfo"  parameterClass="java.lang.String"   resultClass="rolesVO" cacheModel="RFCRolesCache">
			    select 
					ROLE_ID  roleId,
					ROLE_NM  roleNm,
					ROLE_DC roleDc,
					[DEPTH] [depth],
					CREATE_DATE  createDate,
					MODIFY_DATE modifyDate
				from 
					RFC_COMTNROLES
				where 
					ROLE_ID = #roleId#
	</select>
	
	<select id="rolesDAO.getRolesHierarchiesForParentRole"  parameterClass="java.lang.String"   resultMap="rolesHierarchy" cacheModel="RFCRolesCache">
			   select 
					PARENT_ROLE  parentRole,
					CHILD_ROLE  childRole,
					CREATE_DATE  createDate,
					MODIFY_DATE  modifyDate
				from 
					RFC_COMTNROLES_HIERARCHY
				where 
					CHILD_ROLE =#roleId#
				order by  CREATE_DATE  asc
	</select>

	
	<insert id="rolesDAO.insertRole"  parameterClass="rolesVO">
					INSERT INTO RFC_COMTNROLES
						 (
						 	ROLE_ID,
						 	ROLE_NM,
						 	ROLE_DC,
						 	[DEPTH],
						 	CREATE_DATE,
						 	MODIFY_DATE)
						VALUES 
					  (
						#roleId# ,
						#roleNm# ,
						#roleDc# ,
						#depth#,
						#createDate#,
						#modifyDate# )
	</insert>
	<update  id="rolesDAO.updateRole"  parameterClass="rolesVO" >
					UPDATE
							   RFC_COMTNROLES
					  SET 	
					            ROLE_NM=#roleNm#, 
								ROLE_DC =#roleDc#,
				  				MODIFY_DATE=#modifyDate#
				  	  WHERE 
				  				ROLE_ID = #roleId#
	</update>
	<delete id="rolesDAO.deleteRole" parameterClass="java.lang.String">
					DELETE  FROM 
							RFC_COMTNROLES
					WHERE  	
							ROLE_ID = #roleId#
	</delete>
	
	<insert id="rolesDAO.insertRolesHierarchies"  parameterClass="rolesHierarchyVO">
					INSERT INTO RFC_COMTNROLES_HIERARCHY
						 (
						 	PARENT_ROLE,
						 	CHILD_ROLE,
						 	CREATE_DATE,
						 	MODIFY_DATE)
						VALUES 
					  (
						#parentRole# ,
						#childRole# ,
						#createDate#,
						#modifyDate# )
	</insert>
	<delete id="rolesDAO.deleteRolesHierarchies" parameterClass="java.lang.String">
					DELETE  FROM 
							RFC_COMTNROLES_HIERARCHY
					WHERE  	
							PARENT_ROLE = #roleId#
	</delete>
	
</sqlMap>